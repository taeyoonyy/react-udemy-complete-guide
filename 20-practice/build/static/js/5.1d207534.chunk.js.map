{"version":3,"sources":["components/hooks/use-http.js","components/lib/api.js","components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","console","log","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","loadedComments","addedCommentHandler","length","onClick","QuoteDetail","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/5.1d207534.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      console.log('request data', requestData)\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-7088d-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../hooks/use-http';\nimport { addComment } from '../lib/api';\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../ui/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  console.log(props.quoteId)\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(()=>{\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({commentData: {text: enteredText}, quoteId: props.quoteId})\n\n    // optional: Could validate here\n\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'><LoadingSpinner /></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\nimport LoadingSpinner from '../ui/LoadingSpinner'\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length < 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n  console.log(params.quoteId)\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import {\n  useParams,\n  Route,\n  Link,\n  useRouteMatch\n} from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport Comments from \"../components/comments/Comments\";\nimport useHttp from \"../components/hooks/use-http\";\nimport { getSingleQuote } from \"../components/lib/api\";\nimport { useEffect } from \"react/cjs/react.development\";\nimport LoadingSpinner from \"../components/ui/LoadingSpinner\";\n\n// const DUMMY_QUOTES = [\n//   { id: \"q1\", author: \"max\", text: \"good\" },\n//   { id: \"q2\", author: \"max2\", text: \"good2\" },\n// ];\nconst QuoteDetail = () => {\n  const params = useParams();\n  const match = useRouteMatch();\n  const { quoteId } = params;\n\n  const {sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true);\n\n  useEffect(()=> {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId])\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>\n  }\n\n\n  // if (!loadedQuote.text) {\n  //   return <p> No Quote Found!</p>;\n  // }\n\n  if (status === 'pending' ) {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={`${match.path}`} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}