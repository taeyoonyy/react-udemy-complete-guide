{"version":3,"sources":["components/hooks/use-http.js","components/lib/api.js","components/ui/Card.module.css","components/quotes/QuoteForm.module.css","components/ui/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","console","log","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","ref","rows","onClick","actions","NewQuote","history","useHistory","useEffect"],"mappings":"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","file":"static/js/6.bb8675c6.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      console.log('request data', requestData)\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-7088d-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3_jzl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Fragment } from \"react/cjs/react.production.min\";\nimport Card from \"../ui/Card\";\nimport LoadingSpinner from \"../ui/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusHandler = () => {\n    console.log(\"!!!!\");\n    setIsEntering(true);\n  };\n\n  const finishEnteringHandle = () => {\n    setIsEntering(false);\n  }\n\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) =>\n          \"Are you sure you want to leave? All your entered data will be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div onClick={finishEnteringHandle} className={classes.actions}>\n            <button className=\"btn\">Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../components/hooks/use-http';\nimport { addQuote } from '../components/lib/api';\nimport { useEffect } from 'react';\nconst NewQuote = () => {\n  const {sendRequest, status} = useHttp(addQuote)\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  },[status, history])\n\n\n  const addQuoteHandler = quoteData => {\n    sendRequest(quoteData);\n  };\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler}/>\n}\n\nexport default NewQuote;"],"sourceRoot":""}